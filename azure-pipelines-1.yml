# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- none

variables:
- group: AzureResourcesVariableGroup

stages:
- stage: build
  jobs:
    - job: build
      pool:
        vmImage: 'windows-2019'     

      variables:
        solution: '**/*.sln'
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'

      steps:
      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solution)'

      - task: VSBuild@1
        inputs:
          solution: '$(solution)'
          msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
      - task: PublishBuildArtifacts@1
        displayName: publish artifact
        inputs:
          ArtifactName: drop
          publishLocation: Container
          PathtoPublish: $(build.artifactStagingDirectory)

- stage: IaC
  jobs:
    - job: Iac
      pool:
        vmImage: 'windows-latest'

      steps: 
        - checkout: none
        - task: AzureCLI@2
          
          inputs:
            azureSubscription: 'Abonnement Visual Studio Enterprise(14abf4c6-3fa0-47af-b4a5-a7fbf3d5a47c)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # create a resource group
              az group create -l $(location) -n $(resourcegroupname)
              
              # create and configure Azure SQL logical server and Azure SQL database
              az sql server create -l $(location) -g $(resourcegroupname) -n $(sqlservername) -u $(username) -p $(password)
              az sql db create -g $(resourcegroupname) -s $(sqlservername) -n $(dbname) --service-objective Basic
              az sql server firewall-rule create -g $(resourcegroupname) -s $(sqlservername) -n allowazure --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0
              
              # create and configure an Azure App Service plan and an Azure web app
              az appservice plan create -g $(resourcegroupname) -n $(serviceplanname) --sku FREE
              az webapp create -g $(resourcegroupname) -p $(serviceplanname) -n $(webappname)

- stage: deploy
  jobs:
  - job: deploy
    pool: 
      vmImage: 'windows-latest'
    steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          artifactName: drop
          downloadPath: $(System.ArtifactsDirectory) # $(System.DefaultWorkingDirectory)
          buildType: current
          downloadType: single
      - task: AzureRmWebAppDeployment@4
        inputs:
          appType: webApp
          azureSubscription: 'Abonnement Visual Studio Enterprise(14abf4c6-3fa0-47af-b4a5-a7fbf3d5a47c)'
          ConnectionType: AzureRM
          DeploymentType: webDeploy
          WebAppName: $(webappname)
          ResourceGroupName: $(resourcegroupname)
          packageForLinux: $(Pipeline.Workspace)/**/drop/*.zip # $(System.DefaultWorkingDirectory)/**/*.zip
      - task: AzureAppServiceSettings@1
        inputs:
          azureSubscription: 'Abonnement Visual Studio Enterprise(14abf4c6-3fa0-47af-b4a5-a7fbf3d5a47c)'
          appName: $(webappname)
          resourceGroupName: $(resourcegroupname)
          connectionStrings: |
            [
              {
                "name": "MyDbConnection",
                "value": "Server=tcp:$(sqlservername).database.windows.net,1433;Initial Catalog=$(dbname);Persist Security Info=False;User ID=$(USERNAME);Password=$(PASSWORD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
                "type": "SqlAzure",
                "slotSetting": false
              }
            ]
            